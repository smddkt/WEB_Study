'use client';
import React, { useEffect, useState } from 'react';
import { useAppDispatch } from '@/redux/hooks';
import { setIsLoading } from '@/redux/common/reducer';
import useSWR from 'swr';
import { getFetcher } from '@/libs';
import Loading from '@/components/Common/Loading';
import Custom500 from '@/app/error';

import { FButton } from '@/components/Common/Button';
import FOutlineInput from '@/components/Common/FOutlineInput';
import FTypography from '@/components/Common/FTypography';
import useCustomRouter from '@/hooks/useCustomRouter';
import useWindowSize from '@/hooks/useWindowSize';
import { Box, Container, Grid } from '@mui/material';

const defaultValues = {
  name: '',
  phone: '',
};

const FindIdPage = () => {
  const { push } = useCustomRouter();
  const { isMobile } = useWindowSize();
  const dispatch = useAppDispatch();
  const [form, setForm] = useState(defaultValues);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');

  const { data, error: fetchError, isLoading } = useSWR('/api/auth/find-id', getFetcher);

  useEffect(() => {
    if (data) {
      setForm(data);
    }
  }, [data]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prevForm) => ({ ...prevForm, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    dispatch(setIsLoading(true));
    try {
      const response = await fetch('/api/auth/find-id', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      const data = await response.json();
      setResult(data.email);
      setError('');
    } catch (err) {
      setError('아이디 찾기에 실패하였습니다.');
    } finally {
      dispatch(setIsLoading(false));
    }
  };

  if (isLoading) {
    return <Loading />;
  }

  if (fetchError) {
    return <Custom500 />;
  }

  return (
    <Container sx={{ padding: '0 10px !important', maxWidth: '558px !important', width: '100%' }}>
      <Grid container direction="column" justifyContent="flex-start" alignItems="center">
        <Box mt={12}>
          <FTypography type="heading3" text="아이디 찾기" />
        </Box>
        <Box
          mt={5}
          sx={{ display: 'flex', width: '100%', padding: '36px', borderRadius: '12px', border: '1px solid #DDD' }}
        >
          <form onSubmit={handleSubmit} style={{ width: '100%' }}>
            <Grid container direction="column" justifyContent="flex-start" alignItems="stretch">
              <Box>
                <FTypography type="label3" text="이름" />
              </Box>
              <Box mt={1}>
                <FOutlineInput
                  type="text"
                  name="name"
                  value={form.name}
                  placeholder="이름을 입력해주세요"
                  onChange={handleChange}
                />
              </Box>
              <Box mt={4}>
                <FTypography type="label3" text="연락처" />
              </Box>
              <Box mt={1}>
                <FOutlineInput
                  type="text"
                  name="phone"
                  value={form.phone}
                  placeholder="'-'없이 숫자만 입력해주세요"
                  onChange={handleChange}
                />
              </Box>
              <Box mt={3} sx={{ display: 'flex', width: '100%', justifyContent: 'center' }}>
                <FButton size="medium" type="primary" text="아이디 찾기" />
              </Box>
              {error && (
                <Box mt={2} sx={{ display: 'flex', justifyContent: 'center' }}>
                  <FTypography type="body2" text={error} color="red" />
                </Box>
              )}
              {result && (
                <Box mt={2} sx={{ display: 'flex', justifyContent: 'center' }}>
                  <FTypography type="body2" text={`찾은 아이디: ${result}`} />
                </Box>
              )}
            </Grid>
          </form>
        </Box>
      </Grid>
    </Container>
  );
};

export default FindIdPage;

